REQ-1.1.1| The ground plane shall display a grid with 32cm x 32cm square
REQ-1.1.2| The grid shall be positioned at Y=0 (ground level)
REQ-1.1.3| Grid lines shall use RGB(180, 180, 180) at 35% opacity
REQ-1.1.4| Major grid lines every 160cm shall use RGB(200, 200, 200) and be thicker
REQ-1.1.5| The grid origin (0,0,0) shall be at the center of the workspace
REQ-1.2.1| The grid shall be clickable for voxel placement
REQ-1.2.2| Grid opacity shall increase to 65% within 2 grid squares of cursor during placement
REQ-1.2.3| The grid shall extend to cover the entire workspace area
REQ-10.1.1| System shall use Dual Contouring algorithm for surface generation
REQ-10.1.2| Algorithm shall provide better feature preservation than Marching Cube
REQ-10.1.3| System shall support adaptive mesh generation based on voxel resolution
REQ-10.1.4| System shall support multi-resolution surface generation (LOD)
REQ-10.1.5| System shall provide real-time preview with simplified mesh
REQ-10.1.6| System shall generate high-quality export meshe
REQ-10.1.7| System shall preserve sharp edges for architectural detail
REQ-11.1.1| System shall maintain 895+ unit tests across all subsystem
REQ-11.1.2| System shall use Google Test framework for all unit test
REQ-11.1.3| All tests shall include proper timeout constraint
REQ-11.2.1| System shall provide visual validation via screenshot analysi
REQ-11.2.2| System shall provide integration tests for cross-component functionality
REQ-11.2.3| System shall provide CLI validation for end-to-end workflow
REQ-11.3.1| System shall include performance benchmarking in test
REQ-11.3.2| System shall support headless test execution
REQ-12.1.1| All executables shall be run via execute_command.sh script
REQ-12.1.2| System shall support comprehensive test coverage for core library
REQ-12.1.3| System shall maintain shared codebase across application
REQ-12.2.1| System shall focus on single-user editing (no collaboration features)
REQ-12.2.2| System shall provide testable architecture with isolated subsystem
REQ-12.2.3| System shall support CI/CD integration for automated testing
REQ-13.1.1| System shall provide Foundation EventDispatcher for decoupled communication
REQ-13.1.2| Event system shall be type-safe across all subsystem
REQ-13.1.3| System shall support event subscription/unsubscription pattern
REQ-13.1.4| Event handling shall be thread-safe
REQ-13.2.1| System shall provide object pooling via MemoryPool for performance
REQ-13.2.2| System shall detect memory pressure and trigger cleanup
REQ-13.2.3| System shall track memory allocation
REQ-13.3.1| System shall provide vector and matrix operation
REQ-13.3.2| System shall provide intersection calculation
REQ-13.3.3| System shall provide geometric utilitie
REQ-13.4.1| System shall manage application setting
REQ-13.4.2| System shall support platform-specific configuration
REQ-13.4.3| System shall allow runtime parameter adjustment
REQ-13.5.1| System shall provide multi-level logging
REQ-13.5.2| System shall support performance profiling
REQ-13.5.3| System shall manage debug output
REQ-2.1.1| Voxels shall be placeable only at 1cm increment position
REQ-2.1.2| Within each 32cm grid cell, there shall be exactly 32 valid positions per axi
REQ-2.1.3| Voxels shall always be axis-aligned (no rotation)
REQ-2.1.4| No voxels shall be placed below Y=0
REQ-2.2.1| When hovering over the ground plane, a green outline preview shall be displayed
REQ-2.2.2| The preview shall snap to the nearest valid 1cm increment position
REQ-2.2.3| The preview shall update in real-time as the mouse move
REQ-2.2.4| All voxel sizes (1cm to 512cm) shall be placeable at any valid 1cm increment position on the ground plane
REQ-2.3.1| When hovering over an existing voxel, the face under the cursor shall be highlighted
REQ-2.3.2| Face highlighting shall clearly indicate which face is selected
REQ-2.3.3| Clicking on a highlighted face shall place the new voxel adjacent to that face
REQ-3.1.1| Same-size voxels shall auto-snap to perfect alignment by default
REQ-3.1.2| Holding Shift shall allow placement at any valid 1cm increment
REQ-3.1.3| Aligned placement means edges match perfectly with the target face
REQ-3.2.1| A green outline preview shall show exact placement position
REQ-3.2.2| Placement shall respect 1cm increment positions on the target face
REQ-3.2.3| The preview shall snap to nearest valid position
REQ-3.3.1| Placement plane shall snap to the smaller voxel's face
REQ-3.3.2| Placement plane shall maintain height while preview overlaps any voxel at current height
REQ-3.3.3| When multiple voxels at different heights are under cursor, highest takes precedence
REQ-3.3.4| Plane only changes when preview completely clears current height voxel
REQ-4.1.1| All placement previews shall use green outline rendering
REQ-4.1.2| Invalid placements shall show red outline preview
REQ-4.1.3| Preview updates shall be smooth and responsive (< 16ms)
REQ-4.2.1| Face highlighting shall use yellow color (as per DESIGN.md)
REQ-4.2.2| Only one face shall be highlighted at a time
REQ-4.2.3| Highlighting shall be visible from all camera angle
REQ-4.3.1| System shall prevent overlapping voxel placement
REQ-4.3.2| Invalid placement attempts shall show red preview
REQ-4.3.3| Valid placements shall show green preview
REQ-5.1.1| Left-click shall place a voxel at the current preview position
REQ-5.1.2| Right-click on a voxel shall remove that voxel
REQ-5.1.3| Mouse movement shall update preview position in real-time
REQ-5.1.4| Ray-casting shall determine face/position under cursor
REQ-5.2.1| Voxels shall not overlap with existing voxel
REQ-5.2.2| System shall validate placement before allowing it
REQ-5.2.3| Only positions with Y â‰¥ 0 shall be valid
REQ-5.3.1| Current voxel size controlled by active resolution setting
REQ-5.3.2| Resolution changed via `resolution <size>` command
REQ-5.3.3| Available resolutions: 1cm, 2cm, 4cm, 8cm, 16cm, 32cm, 64cm, 128cm, 256cm, 512cm
REQ-5.4.1| Shift key shall override auto-snap for same-size voxel
REQ-5.4.2| No rotation controls (voxels always axis-aligned)
REQ-6.1.1| Grid rendering shall maintain 60 FPS minimum (90+ FPS for VR)
REQ-6.1.2| Preview updates shall complete within 16m
REQ-6.1.3| Face highlighting shall update within one frame
REQ-6.1.4| Resolution switching shall complete within 100m
REQ-6.2.1| System shall handle 10,000+ voxels without degradation
REQ-6.2.2| Grid size shall scale with workspace (up to 8m x 8m)
REQ-6.3.1| Total application memory shall not exceed 4GB (Meta Quest 3 constraint)
REQ-6.3.2| Voxel data storage shall not exceed 2GB
REQ-6.3.3| Rendering buffers shall not exceed 512MB
REQ-6.3.4| Application overhead shall not exceed 1GB
REQ-6.3.5| System shall detect and respond to memory pressure
REQ-7.1.1| System shall support cross-platform desktop compatibility
REQ-7.1.2| System shall support Meta Quest 3 VR platform
REQ-7.1.3| System shall use OpenGL 3.3+ core profile minimum
REQ-7.2.1| System shall use CMake for cross-platform build
REQ-7.2.2| System shall use Ninja as the primary build generator
REQ-7.2.3| System shall support modular library structure for shared core
REQ-7.3.1| System shall use Qt6 for desktop GUI application
REQ-7.3.2| System shall use OpenXR SDK for VR interface
REQ-7.3.3| System shall use Meta Hand Tracking SDK for hand tracking
REQ-7.3.4| System shall use LZ4 compression for file storage
REQ-7.3.5| System shall use Google Test framework for unit testing
REQ-8.1.10| Format shall include creation and modification timestamp
REQ-8.1.1| Custom binary format shall include file header with version and metadata
REQ-8.1.2| Format shall store workspace dimensions and setting
REQ-8.1.3| Format shall store multi-resolution voxel data for all 10 level
REQ-8.1.4| Format shall store current active resolution level
REQ-8.1.5| Format shall store camera position and view setting
REQ-8.1.6| Format shall store limited undo history (10-20 operations)
REQ-8.1.7| Format shall store vertex selection state
REQ-8.1.8| Format shall store group definitions and metadata
REQ-8.1.9| Format shall store group visibility state
REQ-8.2.1| System shall export STL files for 3D printing and sharing
REQ-8.2.2| System shall support format versioning for backward compatibility
REQ-8.2.3| System shall use LZ4 compression for efficient storage
REQ-9.1.1| CLI shall provide interactive command prompt with auto-completion
REQ-9.1.2| CLI shall provide built-in help system and command documentation
REQ-9.1.3| CLI shall support tab completion for command names, filenames, and group name
REQ-9.1.4| CLI shall provide context-sensitive parameter suggestion
REQ-9.2.1| CLI shall support help commands (help, help <command>)
REQ-9.2.2| CLI shall support camera commands (zoom, view, rotate, reset)
REQ-9.2.3| CLI shall support voxel commands (resolution, workspace, render)
REQ-9.2.4| CLI shall support file commands (save, load, export)
REQ-9.2.5| CLI shall support group commands (group create/hide/show/list)
REQ-9.2.6| CLI shall support undo/redo command
