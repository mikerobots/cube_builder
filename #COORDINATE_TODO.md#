# COORDINATE_TODO.md - Coordinate System Migration Tracking

## üéØ OBJECTIVE
Ensure all subsystems use the centered coordinate system (0,0,0 at workspace center) consistently throughout the codebase.

## üìã AGENT INSTRUCTIONS

### Before Starting:
1. **CLAIM YOUR SUBSYSTEM**: Mark your subsystem as "üîÑ IN PROGRESS - Agent: [Your Name]"

PLEASE MARK IN WORK BEFORE EXECUTING!!!!!!!!!

2. **READ CONTEXT**: Review ARCHITECTURE.md and DESIGN.md for subsystem details
3. **UNDERSTAND THE GOAL**: All coordinates should be centered at (0,0,0) with workspace extending equally in all directions

### Analysis Process:
1. **List All Files**: Document every .cpp and .h file in the subsystem
2. **Check Each File**: Look for:
   - Coordinate calculations and transformations
   - Hardcoded coordinate assumptions
   - Boundary checks and validation
   - Position conversions and snapping
   - Any math involving positions or bounds
3. **Document Findings**: For each file, note:
   - ‚úÖ CORRECT: Uses centered coordinates properly
   - ‚ùå NEEDS FIX: Contains old coordinate assumptions
   - ‚ö†Ô∏è SUSPICIOUS: Unclear, needs deeper review
   - üîç NO COORDS: File doesn't handle coordinates
4. **Provide Details**: For files needing fixes, specify:
   - Line numbers of problematic code
   - What needs to be changed
   - Potential impact on other systems

### Completion:
1. Update status to "‚úÖ COMPLETE" or "‚ùå NEEDS FIXES"
2. Summarize findings and recommendations
3. Note any dependencies on other subsystems

## üèóÔ∏è SUBSYSTEM STATUS

### 1. VoxelData Management (`src/voxel_data/`)
**Status**: ‚ùå NEEDS FIXES  
**Agent**: Claude  
**Last Updated**: 2025-01-17

**Files Analyzed**:
- [x] VoxelDataManager.h - ‚úÖ CORRECT
- [x] VoxelGrid.h - ‚úÖ CORRECT
- [x] WorkspaceManager.h - ‚úÖ CORRECT
- [x] VoxelTypes.h - ‚ùå NEEDS FIX
- [x] SparseOctree.h - ‚úÖ CORRECT (uses relative grid coordinates)
- [ ] SparseOctree.cpp - Not analyzed (implementation details)
- [ ] No VoxelCoordinate.h/cpp or MultiResolutionGrid.h/cpp files exist

**Analysis Summary**:
The VoxelData subsystem mostly uses centered coordinates correctly:

‚úÖ **CORRECT Implementations**:
1. **WorkspaceManager.h** (lines 77-83, 90-96):
   - Correctly defines workspace bounds as centered: `(-size/2, 0, -size/2)` to `(size/2, size, size/2)`
   - Position validation uses centered bounds
   - Y >= 0 constraint properly enforced

2. **VoxelGrid.h** (lines 104-110, 113-127, 129-139):
   - `isValidWorldPosition()` uses centered coordinates
   - `worldToGrid()` correctly shifts from centered to grid indices
   - `gridToWorld()` correctly shifts from grid indices to centered world

3. **VoxelDataManager.h**:
   - Uses VoxelGrid's coordinate conversion methods
   - Position validation delegates to WorkspaceManager
   - Collision detection uses world space properly

4. **SparseOctree.h**:
   - Uses relative grid coordinates (0-based indexing)
   - No direct world coordinate assumptions

‚ùå **NEEDS FIX**:
1. **VoxelTypes.h** (lines 59-70, 73-86):
   - `VoxelPosition::toWorldSpace()` assumes old 0-based coordinate system
   - `VoxelPosition::fromWorldSpace()` assumes old 0-based coordinate system
   - These methods don't account for centered workspace
   - Should use VoxelGrid's conversion methods or accept workspace center

**Recommendations**:
1. Fix `VoxelPosition` struct methods to handle centered coordinates
2. Either remove these methods and use VoxelGrid's conversions, or update them to accept workspace bounds/center
3. Ensure all tests using VoxelPosition are updated after fix

**Dependencies**:
- Input system likely uses VoxelPosition for placement
- File I/O may serialize VoxelPosition data
- Commands may use VoxelPosition::toWorldSpace()

---

### 2. Rendering Engine (`src/rendering/`)
**Status**: ‚úÖ COMPLETE  
**Agent**: Claude  
**Last Updated**: 2025-01-17

**Files Analyzed**:
- [x] RenderEngine.h/cpp - ‚úÖ CORRECT (voxel rendering is stubbed)
- [x] OpenGLRenderer.h/cpp - ‚úÖ CORRECT (low-level GPU operations, no coordinate assumptions)
- [x] GroundPlaneGrid.h/cpp - ‚úÖ CORRECT
- [x] RenderTypes.h - ‚úÖ CORRECT (just data structures)
- [x] VoxelMeshGenerator.h/cpp (apps/cli) - ‚ùå NEEDS FIX
- [ ] ShaderManager.h/cpp - Not analyzed (shader management only)
- [ ] RenderState.h/cpp - Not analyzed (state management only)

**Analysis Summary**:
The Rendering subsystem mostly handles coordinates correctly:

‚úÖ **CORRECT Implementations**:
1. **GroundPlaneGrid.cpp** (lines 181-193, 195-213):
   - Correctly generates grid centered at origin
   - Uses halfSizeX/halfSizeZ to calculate bounds: `-cellsX * cellSize` to `cellsX * cellSize`
   - Grid lines properly span from negative to positive coordinates
   - Y coordinate fixed at 0 for ground plane

2. **RenderEngine.cpp**:
   - `renderVoxels()` is just a stub - no coordinate assumptions
   - Actual voxel rendering happens in application layer

3. **OpenGLRenderer**:
   - Low-level GPU wrapper, no coordinate system assumptions
   - Just passes through vertex data

‚ùå **NEEDS FIX**:
1. **VoxelMeshGenerator.cpp** (lines 69-73):
   - Uses old coordinate system assuming voxels start at (0,0,0)
   - Calculates world position as `gridPos * voxelSize + voxelSize * 0.5f`
   - Should use VoxelGrid's `gridToWorld()` method or account for centered workspace
   - This is why voxels appear in wrong positions in the CLI app

**Recommendations**:
1. Update VoxelMeshGenerator to use proper coordinate conversion
2. Either use VoxelGrid's conversion methods or accept workspace bounds
3. The fix should shift X and Z coordinates by -workspaceSize/2

**Dependencies**:
- CLI application depends on VoxelMeshGenerator for rendering
- Visual feedback system may use similar mesh generation

---

### 3. Camera System (`src/camera/`)
**Status**: ‚úÖ COMPLETE  
**Agent**: Claude  
**Last Updated**: 2025-01-17

**Files Analyzed**:
- [x] Camera.h - ‚úÖ CORRECT
- [x] OrbitCamera.h - ‚úÖ CORRECT
- [x] CameraController.h - ‚úÖ CORRECT
- [x] Viewport.h - ‚úÖ CORRECT
- [ ] No CameraManager, ViewPresets, or CameraAnimator files (functionality built into OrbitCamera)

**Analysis Summary**:
The Camera System correctly uses centered coordinates:

‚úÖ **CORRECT Implementations**:
1. **Camera.h** (lines 27-28):
   - Default target is (0,0,0) - correctly centered
   - Default position is (0,0,5) - looking at origin
   - No hardcoded coordinate assumptions

2. **OrbitCamera.h** (lines 31, 253):
   - Target defaults to (0,0,0)
   - Camera orbits around the target position
   - View presets all orbit around current target
   - `frameBox()` correctly calculates center as `(minBounds + maxBounds) * 0.5f`

3. **CameraController.h** (line 147-148):
   - `frameAll()` correctly uses bounding box center
   - No coordinate system assumptions

4. **Viewport.h**:
   - Pure screen-to-world transformation math
   - No coordinate system assumptions
   - Works with any coordinate system

**Recommendations**:
- No changes needed - the camera system is coordinate-system agnostic
- It correctly focuses on (0,0,0) by default
- All camera operations work relative to the target position

**Dependencies**:
- None - camera system is independent of coordinate system choice

---

### 4. Selection System (`src/selection/`)
**Status**: ‚úÖ COMPLETE  
**Agent**: Claude  
**Last Updated**: 2025-01-17

**Files Analyzed**:
- [x] SelectionManager.h/cpp - ‚úÖ CORRECT (uses selector classes)
- [x] SelectionSet.h/cpp - ‚úÖ CORRECT (stores VoxelIds)
- [x] SelectionTypes.h/cpp - ‚ùå NEEDS FIX
- [x] BoxSelector.h/cpp - ‚ùå NEEDS FIX
- [x] SphereSelector.h/cpp - ‚ùå NEEDS FIX
- [ ] FloodFillSelector.h/cpp - Not analyzed
- [ ] SelectionRenderer.h/cpp - Not analyzed

**Analysis Summary**:
The Selection System has multiple coordinate system issues:

‚úÖ **CORRECT Implementations**:
1. **SelectionManager**:
   - Delegates to selector classes for actual selection
   - No direct coordinate assumptions

2. **SelectionSet**:
   - Just stores VoxelIds
   - No coordinate system assumptions

‚ùå **NEEDS FIX**:
1. **SelectionTypes.cpp** (lines 8-12, 21-25):
   - `VoxelId::getWorldPosition()` assumes old coordinate system
   - Returns `position * size + size * 0.5f` without centering
   - `VoxelId::getBounds()` also assumes non-centered coordinates

2. **BoxSelector.cpp** (lines 74-78):
   - Hardcoded workspace bounds as `(0,0,0)` to `workspaceSize`
   - Should be centered: `(-size/2, 0, -size/2)` to `(size/2, size, size/2)`

3. **SphereSelector.cpp** (lines 68-71):
   - Same issue - workspace bounds from `(0,0,0)` to `workspaceSize`
   - Should use centered bounds

**Recommendations**:
1. Update VoxelId methods to use proper coordinate conversion
2. Fix BoxSelector and SphereSelector to use WorkspaceManager's centered bounds
3. Consider using VoxelGrid's conversion methods instead

**Dependencies**:
- Visual feedback system may use selection bounds
- Commands use selection for operations

---

### 5. Input System (`src/input/`)
**Status**: ‚ùå NEEDS FIXES  
**Agent**: Claude  
**Last Updated**: 2025-01-17

**Files Analyzed**:
- [x] PlacementValidation.h/cpp - ‚ùå NEEDS FIX (CRITICAL)
- [x] PlaneDetector.h/cpp - ‚úÖ CORRECT
- [x] MouseHandler.h/cpp - ‚úÖ CORRECT
- [ ] InputManager.h/cpp - Not analyzed
- [ ] KeyboardHandler.h/cpp - Not analyzed
- [ ] TouchHandler.h/cpp - Not analyzed
- [ ] VRInputHandler.h/cpp - Not analyzed
- [ ] InputMapper.h/cpp - Not analyzed
- [ ] No MouseRayGenerator files found

**Analysis Summary**:
The Input System has **CRITICAL coordinate system bugs** in PlacementValidation that are likely causing the integration test failures.

‚úÖ **CORRECT Implementations**:
1. **PlaneDetector.cpp**:
   - Ground plane correctly defined at Y=0 (center, not minimum)
   - Properly handles negative Y values in calculations
   - No hardcoded coordinate assumptions

2. **MouseHandler.cpp**:
   - Ray creation is relative to camera
   - No coordinate system assumptions
   - Proper screen-to-world transformations

‚ùå **CRITICAL FIXES NEEDED**:
1. **PlacementValidation.cpp**:
   - Line 45-47: `if (gridPos.y < 0) return InvalidYBelowZero;` - WRONG, prevents placement below Y=0
   - Line 59: Workspace bounds check uses `worldPos.y < 0` instead of centered bounds
   - Line 72: `isValidIncrementPosition()` enforces `pos.y >= 0` constraint
   - Line 302-304: Another hardcoded `worldPos.y < 0.0f` check

**Root Cause**: PlacementValidation incorrectly assumes Y=0 is the minimum workspace boundary instead of the center. This prevents voxel placement on the lower half of the workspace, explaining why click placement tests fail.

**Recommendations**:
1. Remove all Y >= 0 constraints from PlacementValidation
2. Update workspace bounds checks to use centered coordinates: `y < -size.y/2 || y > size.y/2`
3. Remove or rename `InvalidYBelowZero` enum value
4. Update related tests to verify placement below Y=0 is allowed

**Dependencies**:
- All voxel placement operations depend on PlacementValidation
- Click placement tests will fail until this is fixed
- Commands using placement validation will reject valid positions

---

### 6. Groups System (`src/groups/`)
**Status**: ‚úÖ COMPLETE  
**Agent**: Claude  
**Last Updated**: 2025-01-17

**Files Analyzed**:
- [x] GroupManager.h/cpp - ‚úÖ CORRECT (high-level management)
- [x] VoxelGroup.h/cpp - ‚ùå NEEDS FIX
- [x] GroupTypes.h - ‚úÖ CORRECT (just type definitions)
- [x] GroupOperations.h - ‚úÖ CORRECT (uses VoxelGroup methods)
- [ ] GroupHierarchy.h/cpp - Not analyzed (hierarchy management only)

**Analysis Summary**:
The Groups System has coordinate issues in VoxelGroup:

‚úÖ **CORRECT Implementations**:
1. **GroupManager.h**:
   - High-level group management
   - Delegates to VoxelGroup for operations

2. **GroupTypes.h**:
   - Just type definitions
   - VoxelId struct matches voxel_data (no world conversion)

3. **GroupOperations.h**:
   - Uses VoxelGroup and VoxelDataManager methods
   - No direct coordinate assumptions

‚ùå **NEEDS FIX**:
1. **VoxelGroup.cpp** (lines 112, 176-177):
   - `translate()` method: calculates world position as `voxel.position * voxelSize`
   - `updateBounds()` method: same issue - `voxel.position * voxelSize`
   - Both assume non-centered coordinate system
   - Should use VoxelGrid's conversion or account for workspace center

**Recommendations**:
1. Update VoxelGroup to use proper coordinate conversion
2. Consider using VoxelGrid's gridToWorld() method
3. Or add workspace bounds parameter to methods

**Dependencies**:
- Group operations rely on correct bounds calculation
- Group center calculation affects rotation/scaling pivot points

---

### 7. Visual Feedback System (`src/visual_feedback/`)
**Status**: ‚è≥ PENDING  
**Agent**: None  
**Files to Analyze**:
- [ ] FeedbackRenderer.h/cpp
- [ ] HighlightRenderer.h/cpp
- [ ] OutlineRenderer.h/cpp
- [ ] OverlayRenderer.h/cpp
- [ ] FaceDetector.h/cpp (NOTE: Already fixed in commit 3ed8cbe)

**Key Areas to Check**:
- Face highlighting positions
- Outline preview coordinates
- Overlay positioning
- Grid line rendering
- Visual indicator placement

---

### 8. File I/O System (`src/file_io/`)
**Status**: ‚è≥ PENDING  
**Agent**: None  
**Files to Analyze**:
- [ ] FileManager.h/cpp
- [ ] BinaryFormat.h/cpp
- [ ] STLExporter.h/cpp
- [ ] Compression.h/cpp
- [ ] FileVersioning.h/cpp

**Key Areas to Check**:
- Saved coordinate format
- Workspace bounds serialization
- Position data compression
- STL coordinate export
- Legacy file format handling

---

### 9. Surface Generation (`src/surface_gen/`)
**Status**: üîÑ IN PROGRESS - Agent: Claude  
**Agent**: Claude  
**Files to Analyze**:
- [ ] SurfaceGenerator.h/cpp
- [ ] DualContouring.h/cpp
- [ ] MeshBuilder.h/cpp
- [ ] LODManager.h/cpp

**Key Areas to Check**:
- Vertex position generation
- Surface normal calculations
- Mesh center point
- LOD position scaling
- Edge position interpolation

---

### 10. Undo/Redo System (`src/undo_redo/`)
**Status**: ‚è≥ PENDING  
**Agent**: None  
**Files to Analyze**:
- [ ] HistoryManager.h/cpp
- [ ] Command.h/cpp
- [ ] CommandHistory.h/cpp
- [ ] StateSnapshot.h/cpp
- [ ] Various command implementations

**Key Areas to Check**:
- Position data in commands
- State snapshot coordinates
- Command validation
- Position restoration
- Coordinate-based command parameters

---

### 11. Foundation Layer (`src/foundation/`)
**Status**: ‚è≥ PENDING  
**Agent**: None  
**Files to Analyze**:
- [ ] math/Vector3.h/cpp
- [ ] math/Matrix4.h/cpp
- [ ] math/Transform.h/cpp
- [ ] math/Bounds.h/cpp
- [ ] math/Ray.h/cpp
- [ ] math/Intersection.h/cpp

**Key Areas to Check**:
- Bounds calculation utilities
- Ray origin assumptions
- Intersection calculations
- Transform origin handling
- Vector operations

---

### 12. Application Layer (`apps/cli/`)
**Status**: ‚è≥ PENDING  
**Agent**: None  
**Files to Analyze**:
- [ ] CommandProcessor.h/cpp
- [ ] commands/PlaceCommand.h/cpp
- [ ] commands/CameraCommands.h/cpp
- [ ] commands/WorkspaceCommands.h/cpp
- [ ] MouseInterface.h/cpp

**Key Areas to Check**:
- Command parameter parsing
- Coordinate input validation
- Display coordinate formatting
- Mouse click coordinate conversion
- Command coordinate assumptions

---

## üìä OVERALL PROGRESS

**Total Subsystems**: 12  
**Not Started**: 6  
**In Progress**: 0  
**Complete**: 3 (Rendering Engine, Camera System, Selection System)  
**Needs Fixes**: 3 (VoxelData Management, Input System, Groups System)  

## üîç KNOWN ISSUES

### Already Fixed:
- ‚úÖ FaceDetector.cpp - Fixed in commit 3ed8cbe to use centered coordinates

### Known Problems:
- ‚ùå Integration tests failing due to coordinate mismatches
- ‚ùå Click placement tests failing
- ‚ùå Some tests hanging (possible infinite loops with coordinates)

## üìù NOTES FOR AGENTS

### Common Patterns to Look For:
1. **Old System**: Workspace from (0,0,0) to (size,size,size)
2. **New System**: Workspace from (-size/2,-size/2,-size/2) to (size/2,size/2,size/2)

### Red Flags:
- Any code assuming minimum bounds are (0,0,0)
- Hardcoded positive-only coordinate checks
- Position validation using `>= 0` without considering negative coords
- Center calculations using `size/2` instead of (0,0,0)
- Boundary checks not accounting for negative coordinates

### Testing:
- After fixes, run integration tests to verify
- Pay special attention to boundary cases
- Test with voxels placed at negative coordinates
- Verify camera focuses on (0,0,0) not workspace corner

## üöÄ COMPLETION CRITERIA

A subsystem is considered COMPLETE when:
1. All files have been analyzed
2. All coordinate assumptions have been verified/fixed
3. Related tests pass
4. No regressions in other subsystems
5. Documentation updated if needed

---

**Last Updated**: 2025-01-17 by Claude

## üîß FILES REQUIRING FIXES - SUMMARY

### Critical Fixes (Blocking Integration Tests):
1. **PlacementValidation.cpp** (Input System) - Remove Y >= 0 constraints
2. **VoxelTypes.h** (VoxelData) - Fix VoxelPosition::toWorldSpace() and fromWorldSpace()

### High Priority Fixes:
3. **VoxelMeshGenerator.cpp** (CLI/Rendering) - Use centered coordinate conversion
4. **SelectionTypes.cpp** (Selection) - Fix VoxelId::getWorldPosition() and getBounds()
5. **BoxSelector.cpp** (Selection) - Use centered workspace bounds
6. **SphereSelector.cpp** (Selection) - Use centered workspace bounds
7. **VoxelGroup.cpp** (Groups) - Fix translate() and updateBounds() methods

### Common Fix Pattern:
Most fixes involve changing from:
- `worldPos = gridPos * voxelSize` (assumes origin at corner)

To:
- `worldPos = gridPos * voxelSize - Vector3f(workspaceSize.x/2, 0, workspaceSize.z/2)` (centered)

Or better yet, use VoxelGrid's conversion methods:
- `worldPos = voxelGrid->gridToWorld(gridPos)`